#!/bin/bash

# THIS FILE IS GENERATED BY AUTOMATION SCRIPT! PLEASE REFER TO ORIGINAL SCRIPT!
# THIS FILE IS MODIFIED AUTOMATICALLY FROM TEMPLATE AND SHOULD BE RUNNABLE!

#SBATCH --partition=accelerated
#SBATCH --job-name=GRPO_32B_training
#SBATCH --output=GRPO_32B_training_%A_%a.log
#SBATCH --time=12:00:00
#SBATCH --account=hk-project-pai00072

### This script works for any number of nodes, Ray will find and manage all resources
#SBATCH --nodes=2
#SBATCH --exclusive

### Give all resources to a single Ray task, ray can manage the resources internally
#SBATCH --ntasks-per-node=1
#SBATCH --gpus-per-node=4


# Load modules or your own conda environment here
# module load devel/cuda/12.9 
# Python 3.11.7 is available system-wide at /usr/bin/python3.11

# Set Ray temporary directory to shorter path to avoid socket path length limits
export RAY_TMPDIR=/tmp/ray_${USER}
mkdir -p /tmp/ray_${USER}

export RAY_DEDUP_LOGS=0

# Ensure vLLM uses CUDA and enable debug logs for device detection
export VLLM_DEVICE=cuda
export VLLM_LOGGING_LEVEL=DEBUG

# Set up workspace directory for storage
WORKSPACE_DIR=/hkfs/work/workspace/scratch/st_st190232-myspace
echo "Setting up workspace storage at: $WORKSPACE_DIR"
mkdir -p $WORKSPACE_DIR/temp_data
mkdir -p $WORKSPACE_DIR/checkpoints
mkdir -p $WORKSPACE_DIR/cache

# Set environment variables for workspace usage
export WORKSPACE_TEMP_DIR=$WORKSPACE_DIR/temp_data
export WORKSPACE_CACHE_DIR=$WORKSPACE_DIR/cache
export WORKSPACE_CHECKPOINT_DIR=$WORKSPACE_DIR/checkpoints


# Set Hugging Face cache to workspace storage
export HF_HOME=$WORKSPACE_CACHE_DIR
export HF_HUB_CACHE=$WORKSPACE_CACHE_DIR
export HF_DATASETS_CACHE=$WORKSPACE_CACHE_DIR

# Load Hugging Face token from cache
export HUGGINGFACE_HUB_TOKEN=$(cat ~/.cache/huggingface/token)
export HF_TOKEN=$HUGGINGFACE_HUB_TOKEN
echo "✅ HF Token loaded from cache"

# Load Weights & Biases API key
if [ -f ~/.wandb_token ]; then
    export WANDB_API_KEY=$(cat ~/.wandb_token)
    echo "✅ Wandb API key loaded"
else
    echo "❌ Warning: Wandb token file not found at ~/.wandb_token"
fi

################# DON NOT CHANGE THINGS HERE UNLESS YOU KNOW WHAT YOU ARE DOING ###############
# This script is a modification to the implementation suggest by gregSchwartz18 here:
# https://github.com/ray-project/ray/issues/826#issuecomment-522116599
redis_password=$(uuidgen)
export redis_password

nodes=$(scontrol show hostnames $SLURM_JOB_NODELIST) # Getting the node names
nodes_array=($nodes)

node_1=${nodes_array[0]}
ip=$(srun --nodes=1 --ntasks=1 -w $node_1 hostname --ip-address) # making redis-address

if [[ $ip == *" "* ]]; then
  IFS=' ' read -ra ADDR <<<"$ip"
  if [[ ${#ADDR[0]} > 16 ]]; then
    ip=${ADDR[1]}
  else
    ip=${ADDR[0]}
  fi
  echo "We detect space in ip! You are using IPV6 address. We split the IPV4 address as $ip"
fi

port=6379
ip_head=$ip:$port
export ip_head
echo "IP Head: $ip_head"

echo "STARTING HEAD at $node_1"
# Start head node with explicit GPU specification
srun --nodes=1 --ntasks=1 -w $node_1 \
  ray start --head --node-ip-address=$ip --port=6379 --redis-password=$redis_password \
  --num-gpus=4 --block &
sleep 30

worker_num=$(($SLURM_JOB_NUM_NODES - 1)) #number of nodes other than the head node
for ((i = 1; i <= $worker_num; i++)); do
  node_i=${nodes_array[$i]}
  echo "STARTING WORKER $i at $node_i"
  echo "Worker will connect to: $ip_head"
  
  
  # Start worker nodes with explicit GPU specification
  echo "Starting Ray worker on $node_i..."
  srun --nodes=1 --ntasks=1 -w $node_i \
    ray start --address $ip_head --redis-password=$redis_password --num-gpus=4 --block &
  
  # Store the PID to check later
  worker_pid=$!
  
  sleep 10
done

# Wait for all workers to join
echo "Waiting for workers to join the cluster..."
sleep 30

# Quick check to ensure cluster is ready
echo "Checking Ray cluster status..."
ray status --address $ip_head --redis-password $redis_password

bash examples/qwen2_5_vl_32b_geo3k_grpo.sh
